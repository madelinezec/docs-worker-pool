GIT_BRANCH=$(shell git rev-parse --abbrev-ref HEAD)
ifeq ($(STAGING_USERNAME),)
	USER=$(shell whoami)
else
	USER=$(STAGING_USERNAME)
endif
STAGING_URL="https://docs-mongodborg-staging.corp.mongodb.com"
STAGING_BUCKET=docs-mongodb-org-staging
REPO_DIR=$(shell pwd)
SNOOTY_DB_USR = $(shell printenv MONGO_ATLAS_USERNAME)
SNOOTY_DB_PWD = $(shell printenv MONGO_ATLAS_PASSWORD)
PROJECT=docs-404
MUT_PREFIX=404

ifeq ($(SNOOTY_INTEGRATION),false)
  DEPLOY_JOBS=job-docs-mongodb-org-prod job-docs-atlas-prod job-docs-opsmanager-prod job-docs-cloudmanager-prod
else
  DEPLOY_JOBS=job-docs-manual-integration
endif

.PHONY: next-gen-html next-gen-stage next-gen-deploy $(DEPLOY_JOBS)

include ~/shared.mk

get-build-dependencies:
	@curl https://raw.githubusercontent.com/mongodb/docs-worker-pool/meta/publishedbranches/docs-404.yaml > ${REPO_DIR}/published-branches.yaml

next-gen-html: ## snooty parse and then build-front-end
	@echo ${SNOOTY_DB_PWD} | snooty build "${REPO_DIR}" "mongodb+srv://${SNOOTY_DB_USR}:@cluster0-ylwlz.mongodb.net/snooty?retryWrites=true"; \
	if [ $$? -eq 1 ]; then \
		exit 1; \
	else \
		exit 0; \
	fi
	rsync -az --exclude '.git' "${REPO_DIR}/../../snooty" "${REPO_DIR}"
	cp ${REPO_DIR}/.env.production ${REPO_DIR}/snooty;
	cd snooty; \
	echo "GATSBY_SITE=${PROJECT}" >> .env.production; \
	npm run build; \
	cp -r "${REPO_DIR}/snooty/public" ${REPO_DIR};

next-gen-deploy: $(DEPLOY_JOBS)

$(DEPLOY_JOBS): job-%:
	yes | mut-publish public $* --prefix="${MUT_PREFIX}" --deploy --all-subdirectories ${ARGS}
