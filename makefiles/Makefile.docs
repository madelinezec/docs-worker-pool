GIT_BRANCH := $(shell git rev-parse --abbrev-ref HEAD)
USER=$(shell whoami)
STAGING_URL="https://docs-mongodborg-staging.corp.mongodb.com"
STAGING_BUCKET=docs-mongodb-org-staging

ifeq ($(SNOOTY_INTEGRATION),false)
  PRODUCTION_URL="https://docs.mongodb.com"
  PRODUCTION_BUCKET=docs-mongodb-org-prod
else
  PRODUCTION_URL="docs-mongodbcom-integration.corp.mongodb.com"
  PRODUCTION_BUCKET=docs-manual-integration
endif

PREFIX=manual
PROJECT=docs
MUT_PREFIX ?= $(PROJECT)
REPO_DIR=$(shell pwd)

PATCH_FILE="myPatch.patch"
COMMIT_HASH=$(shell git rev-parse --short HEAD)

SNOOTY_DB_USR = $(shell printenv MONGO_ATLAS_USERNAME)
SNOOTY_DB_PWD = $(shell printenv MONGO_ATLAS_PASSWORD)

include ~/shared.mk

# "PROJECT" currently exists to support having multiple projects
# within one bucket. For the manual it is empty.

DRIVERS_PATH=source/driver-examples

BLOCKS_FILE=./build/${GIT_BRANCH}/tests.blocks
TEST_FILE=./build/${GIT_BRANCH}/tests.js

# "PATCH_ID" related shell commands to manage commitless builds

PATCH_ID=$(shell if test -f "${PATCH_FILE}"; then git patch-id < ${PATCH_FILE} | cut -b 1-7; fi)

PATCH_CLAUSE=$(shell if [ ! -z "${PATCH_ID}" ]; then echo --patch "${PATCH_ID}"; fi)

URL_APPENDIX=$(shell if [ ! -z "${PATCH_ID}" ]; then echo "_${PATCH_ID}"; fi)

# Parse our published-branches configuration file to get the name of
# the current "stable" branch. This is weird and dumb, yes.
STABLE_BRANCH=`grep 'manual' build/docs-tools/data/manual-published-branches.yaml | cut -d ':' -f 2 | grep -Eo '[0-9a-z.]+'`

.PHONY: help lint html markdown stage deploy deploy-search-index examples redirects


get-build-dependencies: 
	@curl https://raw.githubusercontent.com/mongodb/docs-worker-pool/meta/publishedbranches/docs.yaml > ${REPO_DIR}/published-branches.yaml

next-gen-stage: ## Host online for review
	# stagel local jobs \
	if [ -n "${PATCH_ID}" -a "${MUT_PREFIX}" = "${PROJECT}" ]; then \
		mut-publish public ${STAGING_BUCKET} --prefix="${COMMIT_HASH}/${PATCH_ID}/${MUT_PREFIX}" --stage ${ARGS}; \
		echo "Hosted at ${STAGING_URL}/${COMMIT_HASH}/${PATCH_ID}/${MUT_PREFIX}/${USER}/${GIT_BRANCH}/"; \
	# stagel commit jobs \
	elif [ "${MUT_PREFIX}" != "${PROJECT}" ]; then \
		mut-publish public ${STAGING_BUCKET} --prefix="${MUT_PREFIX}" --stage ${ARGS}; \
		echo "Hosted at ${STAGING_URL}/${MUT_PREFIX}/${USER}/${GIT_BRANCH}/"; \
	# reg github push \
	else \
		mut-publish public ${STAGING_BUCKET} --prefix="${COMMIT_HASH}/${MUT_PREFIX}" --stage ${ARGS}; \
		echo "Hosted at ${STAGING_URL}/${COMMIT_HASH}/${MUT_PREFIX}/${USER}/${GIT_BRANCH}/"; \
	fi

next-gen-deploy:	
	yes | mut-publish public ${PRODUCTION_BUCKET} --prefix="${MUT_PREFIX}" --deploy --deployed-url-prefix=https://docs.mongodb.com --json --all-subdirectories ${ARGS};
	@echo "Hosted at ${PRODUCTION_URL}/${MUT_PREFIX}";
	$(MAKE) next-gen-deploy-search-index

next-gen-html: examples
	# snooty parse and then build-front-end
	echo 'snooty build "${REPO_DIR}" "mongodb+srv://${SNOOTY_DB_USR}:@cluster0-ylwlz.mongodb.net/snooty?retryWrites=true" --commit "${COMMIT_HASH}" ${PATCH_CLAUSE}';
	@if [ ! -z "${PATCH_ID}" ]; then \
		echo ${SNOOTY_DB_PWD} | snooty build "${REPO_DIR}" "mongodb+srv://${SNOOTY_DB_USR}:@cluster0-ylwlz.mongodb.net/snooty?retryWrites=true" --commit "${COMMIT_HASH}" ${PATCH_CLAUSE}; \
		if [ $$? -eq 1 ]; then \
			exit 1; \
		else \
			exit 0; \
		fi \
	else \
		echo ${SNOOTY_DB_PWD} | snooty build "${REPO_DIR}" "mongodb+srv://${SNOOTY_DB_USR}:@cluster0-ylwlz.mongodb.net/snooty?retryWrites=true" --commit "${COMMIT_HASH}"; \
		if [ $$? -eq 1 ]; then \
			exit 1; \
		else \
			exit 0; \
		fi \
	fi
	rsync -az --exclude '.git' ${REPO_DIR}/../../snooty ${REPO_DIR} && \
	cp ${REPO_DIR}/.env.production ${REPO_DIR}/snooty && \
	cd snooty && \
	echo "GATSBY_SITE=${PROJECT}" >> .env.production && \
	echo "COMMIT_HASH=${COMMIT_HASH}" >> .env.production && \
	if [ ! -z "${PATCH_ID}" ]; then \
		echo "PATCH_ID=${PATCH_ID}" >> .env.production; \
	fi && \
	npm run build && \
	cp -r "${REPO_DIR}/snooty/public" ${REPO_DIR};
